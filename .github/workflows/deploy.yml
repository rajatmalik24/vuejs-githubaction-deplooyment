name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'  # Change to your required Node.js version

    - name: Install dependencies
      run: npm install
      working-directory: hello-world  # Change this to your Vue.js project directory

    - name: Build Vue.js project
      run: npm run build
      working-directory: hello-world  # Change this to your Vue.js project directory

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.4'  # Change to your required Gradle version

    - name: Copy Vue.js build to Gradle project
      run: |
        mkdir -p gradle-project/src/main/webapp
        cp -r hello-world/dist/* gradle-project/src/main/webapp/
    
    - name: Build WAR file
      run: gradle build
      working-directory: gradle-project

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: war-file
        path: gradle-project/build/libs/*.war

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: war-file
        path: ./build/libs

    - name: Copy WAR to EC2
      env:
        KEY: ${{ secrets.AWS_SSH_KEY }}  # Your EC2 instance's SSH private key
        HOST: ${{ secrets.EC2_HOST }}  # Your EC2 instance's public IP or hostname
        USER: ${{ secrets.EC2_USER }}  # Your EC2 instance's SSH username
      run: |
        scp -i "$KEY" -o StrictHostKeyChecking=no ./build/libs/*.war $USER@$HOST:/path/to/deploy  # Change the destination path as needed

    - name: Deploy WAR on EC2
      env:
        KEY: ${{ secrets.AWS_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        ssh -i "$KEY" -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
        # Commands to stop your server, deploy the new WAR file, and restart your server
        # Example for Tomcat server:
        # sudo systemctl stop tomcat
        # sudo cp /path/to/deploy/*.war /path/to/tomcat/webapps/
        # sudo systemctl start tomcat
        EOF

