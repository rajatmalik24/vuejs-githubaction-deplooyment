name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: hello-world

      - name: Build Vue.js project
        run: npm run build
        working-directory: hello-world

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '7.4'
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"

      - name: Ensure Gradle Wrapper is Executable
        run: chmod +x gradle-project/gradlew

      - name: Copy Vue.js build to Gradle project
        run: |
          mkdir -p gradle-project/src/main/webapp
          cp -r hello-world/dist/* gradle-project/src/main/webapp/

      - name: Build WAR file
        run: |
          cd gradle-project
          ./gradlew build --debug

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: war-file
          path: gradle-project/build/libs/*.war

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: war-file
          path: ./build/libs

      - name: Copy WAR to EC2
        env:
          KEY: ${{ secrets.AWS_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          scp -o StrictHostKeyChecking=no ./build/libs/*.war ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/lib/tomcat10/webapps/HelloRajat

      - name: Deploy WAR on EC2
        env:
          KEY: ${{ secrets.AWS_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i "$KEY" -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          # Commands to stop your server, deploy the new WAR file, and restart your server
          # Example for Tomcat server:
          # sudo systemctl stop tomcat
          # sudo cp /path/to/deploy/*.war /path/to/tomcat/webapps/
          # sudo systemctl start tomcat
          EOF
